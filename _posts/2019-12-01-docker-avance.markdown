---
layout: post
title: "Docker avanc√©"
date: 2019-12-01
description: 
image: /assets/images/docker-pratique-outils/main.png
author: Thibaut BAYER
tags: 
  - Infrastructure
published: true 
---
Je vous ai r√©cemment parl√© de Docker
Nous partons donc du principe que vous avez ces bases (docker push/pull/exec/ps/kill...) et que vous d√©sirez aller un peu plus loin avec Docker. Il vous manque surement √©norm√©ment d'informations pour vraiment utiliser Docker.
Dans cet article j'y r√©pondrais et vous aurez de quoi avoir votre premi√®re stack docker fonctionnelle (promis ca ne sera pas long, seulement 223 pages √©h√©h).

Commen√ßons par nous poser la bonne question, pourquoi utiliser Docker ? *Il parait que c'est cool*

Dans quel contexte ? *Ma stack de dev ? en production ?*

R√©pond t-il a tout nos besoins ? *Surement pas* @@LUL

La conteneurisation va nous permettre de lancer des processus dans un environnement cloisonn√© (oui je sais, je me r√©p√®te). Autrement dit, si vous avez l'habitude d'installer votre stack local √† la main, √† base de `apt install apache2 ... ` ou autre, vous ne voyez surement pas l‚Äôint√©r√™t de passer sur docker et pourtant ! dans √©norm√©ment de cas docker peut vous aider. J'ai eu r√©cemment le cas au travail o√π un d√©veloppeur mobile ne connaissait pas Docker (ou juste de nom) et ne l'utilisait pas parcequ'il en voyait pas forc√©ment l'utilit√©. En ayant pris connaissance des fonctionnalit√©s apport√©es par Docker ainsi qu'une petite pr√©sentation bien ficel√©e ( #JaiUnMelonHorsNorme ), il a fini par trouv√© Docker indispensable.

Voici quelques exemples d'utilisations de docker : 

- En tant que d√©veloppeur web, vous avez votre bon vieux LAMP (Linux, Apache, Mysql, Php) classique, c'est cool mais comment font les nouveaux d√©vs quand ils arrivent dans votre team ? Ils r√©installent la stack compl√®te √† la main ? Quid du d√©veloppeur qui utilise mac alors que toi tu utilises Windows ? C'est √† ce moment l√† que Docker est utile, un fichier de configuration pour tout le monde et en 2 clicks, la stack est mont√©e.
- En tant que devsOps, tu es souvent amen√© √† alterner entre Python et Go, puis parfois, tu as besoin de g√©rer plusieurs versions de python, de go, au sein de la m√™me machine. Pourquoi s'emb√™ter avec une installation manuelle quand tu peux juste faire un `docker run golang:1.11.11`  `docker run golang:1.12.6`  `docker run python:2.7-stretch`  `docker run python:3.7.3-stretch` ?
- En tant que pentester vous utilisez diff√©rents outils d'intrusion et vous travaillez sur une faille PhpMyAdmin, comment tester facilement votre exploit sur diff√©rentes versions ? DOCKERRRRRRR 

Des exemples comme ceux-l√† il en existe un paquet, le plus important n'est pas d'utiliser docker parce que c'est sexy mais d'arriver √† comprendre ce qu'il va vous apporter.

# ‚öôÔ∏è Docker en stack de d√©veloppement
Maintenant que nous avons les diff√©rents cas d'utilisation, prenons un des cas qui m'a concern√© et qui est surement LE cas par excellence de docker : La stack de d√©veloppement

Historiquement, on t√©l√©chargeait notre petit LAMP, MAMP, WAMP et on d√©veloppait dans notre coin p√©pouze.
Ca marche mais c'est vite chiant, on peut souvent avoir un soucis isol√© d'un autre d√©v parcequ'il n'est pas sur le m√™me syst√®me d'exploitation, n'a pas mis la m√™me configuration etc.. Gr√¢ce √† Docker, on va avoir la m√™me configuration, cross-platform et surtout on aura tous les m√™mes erreurs de merde quand √ßa plantera ET CA C'EST COOL ! @@LUL

![](https://media.giphy.com/media/3oxRmGXbquXKz6DNPq/giphy.gif)

## ‚úçÔ∏è Le besoin
On va prendre en compte une stack de d√©veloppement web classique, un bon vieux LAMP ! On a donc besoin :
- D'un serveur web, apache ou nginx
- D'un process PHP-FPM
- D'une base MySQL, PostgreSQL ou autre

La premi√®re chose √† faire dans ce cas l√† est de rechercher si les technos sont disponibles sur Docker (via le docker hub). 

Apr√®s recherche, on trouve donc : 
- [PHP](https://hub.docker.com/_/php)
- [MySQL](https://hub.docker.com/_/mysql)
- [NginX](https://hub.docker.com/_/nginx)

Bingo, on a d√©j√† de quoi faire pour cr√©er notre stack. @@HEY

## üõ†Ô∏è La pratique
Je vous l'avais expliqu√© dans l'article pr√©c√©dent, pour lancer un conteneur on utilise `docker run` oui mais voil√†, c'est vrai mais je vous ai l√©g√®rement menti... 

![](https://media.giphy.com/media/2emoe1XUg23rW/giphy.gif)

`docker run` r√©cup√®re et lance une image docker, c'est vrai... mais imaginez si on devait faire √ßa pour tous les processus que vous utilisez ? √áa serait vite chiant  ! `docker run php && docker run mysql && docker run nginx` etc... Puis comme je vous l'ai dit, les conteneurs ont une dur√©e de vie limit√©, on les lance, ils s'arr√™tent et la donn√©e √† l'int√©rieur de celui-ci est effac√©e. Comment faire pour utiliser une base de donn√©e ? ou m√™me juste votre code source pour qu'il soit interpr√©t√© par PHP ?

En r√©alit√©, Docker ne se limite pas √† 4 commandes push/run/pull/exec, vous pouvez g√©rer bien plus de choses comme le r√©seau entre vos conteneurs, monter des volumes de fichiers, g√©rer vos entr√©es /etc/hosts etc..

C'est exactement la m√™me chose que la configuration d'une machine virtuelle sauf qu'on enl√®ve l'aspect \"mat√©riel\", on ne g√®re pas la m√©moire qu'on attribue √† notre conteneur, ni m√™me son espace disque. Par contre, on peut g√©rer l'espace disque ou la m√©moire qu'on alloue √† la machine virtuelle docker (dans le cas d'un DockerForMac par exemple)

![](/assets/images/docker-pratique-outils/settings.png)

Commen√ßons par la cr√©ation du conteneur nginx, notre process nginx va avoir besoin d'une configuration de base pour fonctionner (bah ouai, il faut bien qu'il sache o√π est notre code source et comment il doit l'interpr√©ter) 

*Pour faciliter la relecture et la compr√©hension, tous les extraits de code ou de configuration sont disponibles sur [ce repo github](https://github.com/bt0r/docker-article)*

Revenons sur l'image docker que j'ai cr√©e:

```dockerfile
FROM nginx:1.17.1-alpine

RUN mkdir -p /var/www/btor.fr

COPY ./config/btor.fr /etc/nginx/sites-available/

WORKDIR /var/www/btor.fr
```
*Je ne reviens pas sur le d√©tail du fichier de configuration nginx, c'est un fichier basique*

Avec cette image, on voit bien qu'il n'y a rien dedans, on r√©cup√®re juste nginx, on copie un fichier de configuration, on cr√©e le r√©pertoire `/var/www/btor.fr` et on le d√©finit comme r√©pertoire par d√©faut. 
Parfait, mais comment dire √† nginx d'afficher notre page web ? 

La solution est de monter un volume pour que ces fichiers soient non pas copi√©s mon mont√©s √† la vol√©e.
- Rendez vous dans votre r√©pertoire `docker/nginx`
- Taper `docker build . -t btor/nginx`
- Puis `docker run -d -v ~/www/docker-article/web:/var/www/btor.fr btor/nginx` (attention au chemin du r√©pertoire web)

Votre conteneur devrait se lancer et afficher un hash (qui correspond √† l'ID du conteneur). V√©rifions avec un `docker ps` : 

```
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES
e4c925076a14        btor/nginx          \"nginx -g 'daemon of‚Ä¶\"   4 seconds ago       Up 3 seconds        80/tcp                   relaxed_wescoff
```

Notre conteneur nginx fonctionne bien, le volume √† l'air d'avoir √©t√© pris en compte. On va donc le v√©rifier : 

```bash
btor@dev$ docker exec <containerID> ls
index.php
```

Bingo, le volume a bien √©t√© mont√© et les fichiers disponibles dans `/web` sont bien dans le r√©pertoire `/var/www/btor.fr` du conteneur.

Maintenant que notre conteneur a bien les bons fichiers, essayons d'y acc√©der en HTTP. 
Premi√®re √©tape: 

```bash
btor@deb$ docker exec <container_id>  wget localhost -O-
...
<h1>Welcome to nginx!</h1>
<p>If you see this page, the nginx web server is successfully installed and
working. Further configuration is required.</p>
...
```


Notre conteneur nous r√©pond bien avec la page par d√©faut de NGINX mais pas de php, logique ! nous avons mont√© un volume de fichier mais aucun conteneur PHP n'existe.

Relions maintenant le conteneur nginx et PHP.

```Dockerfile
FROM php:7.3.6-fpm-alpine

WORKDIR /var/www/btor.fr
```



Ports 

Docker-compose
