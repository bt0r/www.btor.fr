---
layout: post
title: "Chiffrer ses donn√©es avec GPG en CLI"
date: 2018-04-17
description: 
image: /assets/images/gpg/main.jpg
author: Thibaut BAYER
tags: 
  - S√©curit√©
---
[GPG (GNU Privacy Guard)](https://fr.wikipedia.org/wiki/GNU_Privacy_Guard) est une impl√©mentation de [OpenPGP](https://fr.wikipedia.org/wiki/OpenPGP).
GPG permet de chiffrer/signer des fichiers dans le but d'√©changer de l'information en toute s√©curit√©. 
Dans cet article nous allons voir comment proc√©der sans utiliser d'interface graphique afin de bien comprendre le m√©canisme.

# ‚öôÔ∏è Fonctionnement
Le fonctionnement est assez simple, voici l'exemple typique d'√©change de donn√©es chiffr√©es via GPG entre 2 personnes (Marl√®ne et Arthur).

* Marl√®ne **cr√©er ses clefs de chiffrement** (une clef publique et une clef priv√©e)

* Marl√®ne **envoie sa clef publique** aux personnes avec qui elle souhaite discuter (ici Arthur)

* Arthur utilise **la clef publique de Marl√®ne** pour chiffrer ses propres fichiers et lui renvoie la version chiffr√©e de son document.

* Marl√®ne utilise alors **sa clef priv√©e pour d√©chiffrer** le message/fichier d'Arthur. 


![](/assets/images/gpg/GPG.jpg)

> Cliquez sur l'image pour l'afficher en grand

**Ce qui est important :**

* Ne partager que votre clef publique

* Votre clef priv√©e ne sert qu'au d√©chiffrement

* Gardez en lieu s√ªr votre clef priv√©e

# üõ†Ô∏è La pratique
Dans cet exemple j'utilise GPG sur ubuntu 16.04 libre √† vous d'utiliser GPG sur linux/windows ou mac.

### üîë Cr√©ation des clefs
La premi√®re √©tape consiste √† g√©n√©rer des clefs. Pour se faire, rien de plus simple :
```shell
marlene@pc:~$ gpg2 --full-gen-key
```
Il existe 2 commandes pour g√©n√©rer des clefs, celle pr√©sente ci-dessus ainsi que `gpg2 --gen-key`, cette derni√®re permet de lancer l'√©tape de g√©n√©ration de clef par d√©faut, elle vous demandera simplement un nom, un email et vous g√©n√©rera un couple de clefs RSA en 2048 bits. Pratique, rapide mais ne vous permet pas choisir le type de clef d√©sir√© ni m√™me sa robustesse.
J'opte donc pour `--full-gen-key` afin de g√©n√©rer une clef 4096 bits en RSA.

Vous devriez avoir donc ceci :
```shell
gpg (GnuPG) 2.1.11; Copyright (C) 2016 Free Software Foundation, Inc.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

S√©lectionnez le type de clef d√©sir√© :
   (1) RSA et RSA (par d√©faut)
   (2) DSA et Elgamal
   (3) DSA (signature seule)
   (4) RSA (signature seule)
Quel est votre choix ?
```
A cette question, choisissez la valeur par d√©faut : RSA et RSA
```shell
Quel est votre choix ? 1
les clefs RSA peuvent faire une taille comprise entre 1024 et 4096 bits.
Quelle taille de clef d√©sirez-vous ? (2048) 4096
```
Plus votre taille de clef est grande, plus celle-ci est robuste, optez donc pour une clef de 4096 bits.

```shell
La taille demand√©e est 4096 bits
Veuillez indiquer le temps pendant lequel cette clef devrait √™tre valable.
         0 = la clef n'expire pas
      <n>  = la clef expire dans n jours
      <n>w = la clef expire dans n semaines
      <n>m = la clef expire dans n mois
      <n>y = la clef expire dans n ans
Pendant combien de temps la clef est-elle valable ? (0)
```
Gros dilemme, **par d√©faut la clef n'expire pas** c'est √† dire que vous pourrez l'utiliser ad vitam √¶ternam. Dans un monde id√©al il serait judicieux d'avoir une vraie politique de s√©curit√© et de renouveler ses clefs tous les X mois/ann√©es. 
En fonction de l'utilisation de GPG (chiffrement personnel de vos photos de vacances ou chiffrement de donn√©es professionnelles) vous aurez tout int√©r√™t √† faire en sorte que votre clef expire dans 6 mois, 1 an ou plus. 

Libre √† vous de choisir la dur√©e de validit√©, dans mon cas je reste sur une clef qui n'expire jamais.
```shell
Pendant combien de temps la clef est-elle valable ? (0) 
La clef n'expire pas du tout
Est-ce correct ? (o/N) o
```
Validez en tapant `o` puis entrer

```shell
GnuPG doit construire une identit√© pour identifier la clef.

Nom r√©el : Marl√®ne DURAND
Adresse √©lectronique : marlene.durand@gmail.com
Commentaire : 
Vous utilisez le jeu de caract√®res ¬´ utf-8 ¬ª.
Vous avez s√©lectionn√© cette identit√© :
    ¬´ Marl√®ne DURAND <marlene.durand@gmail.com> ¬ª

Changer le (N)om, le (C)ommentaire, l'(A)dresse √©lectronique
ou (O)ui/(Q)uitter ? O
```
GPG va ensuite vous demander quelques informations vous concernant comme votre nom, email et un commentaire sur la clef.  Remplissez les et validez en tapant `O` puis entrer

```shell
De nombreux octets al√©atoires doivent √™tre g√©n√©r√©s. Vous devriez faire
autre chose (taper au clavier, d√©placer la souris, utiliser les disques)
pendant la g√©n√©ration de nombres premiers ; cela donne au g√©n√©rateur de
nombres al√©atoires une meilleure chance d'obtenir suffisamment d'entropie.
```
GPG vous demandera de d√©finir une passphrase (un mot de passe quoi) afin de g√©n√©rer les clefs. Faites en sorte de mettre un mot de passe complexe afin de garantir sa robustesse, et accessoirement souvenez-vous du mot de passe ... √ßa pourrait √™tre utile pour la suite ?

La g√©n√©ration peut prendre quelques minutes, faites couler un caf√©, raconter votre weekend √† vos coll√®gues et revenez apr√®s ?
```shell
gpg: clef AC907F30 marqu√©e de confiance ultime.
gpg: revocation certificate stored as '/home/btor/.gnupg/openpgp-revocs.d/C826A880D01D7EE90D7785A28B728B0DAC907F30.rev'
les clefs publique et secr√®te ont √©t√© cr√©√©es et sign√©es.

gpg: v√©rification de la base de confiance
gpg: marginals needed: 3  completes needed: 1  trust model: PGP
gpg: profondeur : 0  valables :   2  sign√©es :   0
     confiance : 0 i., 0 n.d., 0 j., 0 m., 0 t., 2 u.
pub   rsa4096/AC907F30 2018-04-16 [S]
      Empreinte de la clef = C826 A880 D01D 7EE9 0D77  85A2 8B72 8B0D AC90 7F30
uid        [  ultime ] Marl√®ne DURAND <marlene.durand@gmail.com>
sub   rsa4096/6969D94F 2018-04-16 []
```
La g√©n√©ration termin√©e, vous devriez avoir un r√©capitulatif des clefs qui ont √©t√© g√©n√©r√©es.

Pour v√©rifier les clefs disponibles dans votre trousseau GPG, tapez `gpg2 --list-keys`
```shell
marlene@pc:~$ gpg2 --list-keys
gpg: v√©rification de la base de confiance
gpg: marginals needed: 3  completes needed: 1  trust model: PGP
gpg: profondeur : 0  valables :   1  sign√©es :   0
     confiance : 0 i., 0 n.d., 0 j., 0 m., 0 t., 1 u.
/home/btor/.gnupg/pubring.kbx
-----------------------------
pub   rsa4096/AC907F30 2018-04-16 [SC]
uid        [  ultime ] Marl√®ne DURAND <marlene.durand@gmail.com>
sub   rsa4096/6969D94F 2018-04-16 [E]
```

### ‚úâÔ∏è Envoie de la clef publique
Maintenant que nos clefs sont g√©n√©r√©es, nous allons **envoyer notre clef publique √† tout nos correspondants**.

Pour extraire votre clef publique, tapez : 
```shell
marlene@pc:~$ gpg2 --armor --export marlene.durand@gmail.com > marlene.asc
```
Pensez √† remplacer marlene.durand@gmail.com par l'email de votre clef

Par d√©faut, GPG vous exporte la clef publique, si vous d√©sirez exporter la clef priv√©e pour la mettre sur un autre serveur par exemple, vous devrez utiliser : 
```shell
marlene@pc:~$ gpg2 --armor --export-secret-keys marlene.durand@gmail.com > marlene_private.asc
```
Notez que l'option --armor permet de convertir la sortie (par d√©faut binaire) en ASCII.

### üîí Chiffrer un fichier
Commen√ßons par cr√©er un fichier d'exemple sur le pc d'Arthur :
```shell
arthur@pc:~$ echo "Ce message est √† destination de marl√®ne" > message
arthur@pc:~$ cat message
Ce message est √† destination de marl√®ne
```
Arthur dispose de la clef publique de Marl√®ne, ils peuvent d√©sormais l'utiliser pour chiffrer tout type de fichier.
Importons la clef de Marl√®ne dans le trousseau GPG d'Arthur :

```shell
arthur@pc:~$ gpg2 --import marlene.asc 
gpg: clef AC907F30 : clef publique ¬´ Marl√®ne DURAND <marlene.durand@gmail.com> ¬ª import√©e
gpg:       Quantit√© totale trait√©e : 1
gpg:                     import√©es : 1  (RSA: 1)
```
Pour chiffrer le fichier "message", il suffit d'utiliser cette commande : 

```shell
arthur@pc:~$ gpg2 --output message.gpg --encrypt --armor --recipient marlene.durand@gmail.com message
gpg: 6969D94F : aucune assurance que la clef appartienne vraiment √† l'utilisateur nomm√©.

pub  4096R/6969D94F 2018-04-16 Marl√®ne DURAND <marlene.durand@gmail.com>
Empreinte clef princip. : C826 A880 D01D 7EE9 0D77  85A2 8B72 8B0D AC90 7F30
 Empreinte de sous-clef : E601 A72E D893 CBED D548  F6DF C8A4 316C 6969 D94F

La clef n'appartient PAS forc√©ment √† la personne nomm√©e
dans l'identit√©. Si vous savez *vraiment* ce que vous
faites, vous pouvez r√©pondre oui √† la prochaine question.


Faut-il quand m√™me utiliser cette clef ? (o/N) o
```
Un fichier message.gpg a √©t√© g√©n√©r√©, c'est ce fichier qui sera mis √† disposition de Marl√®ne.

### üîì D√©chiffrement
Marl√®ne re√ßoit le fichier "message.gpg" et doit le d√©chiffrer, rien de plus simple ! Il suffit de taper : 
```shell
marlene@pc:~$ gpg2 --decrypt arthur.gpg 
gpg: chiffr√© avec une clef RSA de 4096 bits, identifiant 6969D94F, cr√©√©e le 2018-04-16
      ¬´ Marl√®ne DURAND <marlene.durand@gmail.com> ¬ª
Ce message est √† destination de marl√®ne
```
Notez que nous aurions pu rediriger la sortie vers un fichier afin de sauvegarder le r√©sultat `gpg2 --decrypt arthur.gpg  > arthur`

# üìù A noter
* Votre **clef priv√©e doit rester PRIVEE** vous ne devez partager que votre clef publique

* La proc√©dure ci-dessus **ne prends pas en compte la signature des fichiers** (v√©rification des √©metteurs) **vous pouvez** bien √©videmment (et c'est recommand√©) **signer vos fichiers avec l'option `--sign`**. J'ai voulu faire simple pour que ce soit plus facilement abordable.

* Il est **possible de chiffrer vos fichiers sym√©triquement** en utilisant l'option `--symetric` , tr√®s peu recommand√© mais bon √† savoir
