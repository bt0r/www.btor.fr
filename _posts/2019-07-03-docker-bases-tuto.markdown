---
layout: post
title: "Docker, les bases"
date: 2019-07-03
description: Tu as entendu parler de Docker sans jamais l'essayer ou tu n'as rien compris ? Voyons un peu comment √ßa fonctionne.
image: /assets/images/docker-bases-tuto/main.jpg
author: Thibaut BAYER
tags: 
  - Infrastructure
  - Syst√®me
---
R√©guli√®rement je me rends compte que certains d√©veloppeurs ne sont pas √† l'aise avec Docker. C'√©tait aussi mon cas au d√©but, Docker peut para√Ætre complexe et flou au premier abord puis rapidement il devient **indispensable**, mais pourquoi ?

Dans cet article, je t√¢cherai de revenir sur les principaux concepts en essayant de faire le plus simple possible.
Si vous avez d√©j√† un niveau avanc√© avec Docker, cet article n'est pas fait pour vous.

# ‚ùì C'est quoi Docker ?
>Docker est un logiciel libre permettant facilement de lancer des applications dans des conteneurs logiciels.

_Source wikip√©dia_

Cool, mais du coup, qu'est-ce qu'un conteneur ? Avant d'expliquer le concept de conteneurisation, commen√ßons par comprendre la base: **la virtualisation**. 

### üê≥ Virtualisation VS Conteneurisation
√áa devrait parler √† beaucoup d'entre vous, c'est le fait **d'√©muler** un syst√®me d'exploitation dans un autre, par exemple, au sein d'un syst√®me d'exploitation Windows 10, j'√©mule un Linux, un MacOS ou m√™me un Windows 3.1. Le logiciel permettant d'√©muler nos syst√®mes d'exploitation est appel√© un **Hyperviseur**. 

Il existe deux types d'hyperviseur¬†:

- **L'hyperviseur de type 2** : 

![](/assets/images/docker-bases-tuto/hyperviseur_type_2.png)
_Source wikip√©dia_

Vous les connaissez certainement sans savoir qu'ils sont de type 2 :  VirtualBox et VMWare workstation. Le type 2 veut dire que l'hyperviseur a besoin d'un syst√®me d'exploitation "h√¥te" (maitre) pour fonctionner. Par exemple, vous ne pouvez pas lancer Virtualbox seul sans Windows ou Ubuntu.

- **L'hyperviseur de type 1** : 

![](/assets/images/docker-bases-tuto/hyperviseur_type_1.png)
_Source wikip√©dia_

A la diff√©rence du type 2, le type 1 fonctionne directement comme un "syst√®me h√¥te" et se charge de communiquer directement avec le mat√©riel.
L'avantage du type 1 est qu'il permet d'avoir de meilleur performance √©tant donn√© qu'on dispose d'une couche applicative en moins contrairement au type 2 o√π le syst√®me d'exploitation h√¥te, sera consommateur de ressources. Hyper-V (Microsoft) est un hyperviseur de type 1.

Et la conteneurisation dans tout √ßa ?

Un conteneur, c'est grossi√®rement la m√™me chose qu'une machine virtuelle, notre conteneur va avoir son propre syst√®me **SAUF** que celui-ci communiquera directement avec le syst√®me d'exploitation h√¥te et pas n√©cessairement avec un hyperviseur. L‚Äôint√©r√™t ? Un gain de performance pardi !

### üñ•Ô∏è Platformes (win, linux, mac)
Maintenant que l'on sait ce qu'est un hyperviseur, qu'on comprend la diff√©rence entre un conteneur et une machine virtuelle, est-ce qu'il y a une diff√©rence entre les diff√©rentes plateformes ? 


![](https://media.giphy.com/media/S3Ot3hZ5bcy8o/giphy.gif)

Oh que oui !

Docker ne se comporte pas r√©ellement de la m√™me fa√ßon en fonction des environnements. Docker se base sur les conteneurs LXC linux et propose une API plus accessible.

Vous voyez le probl√®me ? 

Qui dit Linux, dit : On va avoir un probl√®me avec Windows et Mac.
Effectivement, si vous utilisez Linux sur votre machine h√¥te vous n'aurez aucun probl√®me, Docker est support√© nativement, par contre sous Windows et Mac vous aurez une couche suppl√©mentaire pour faire fonctionner Docker... **Une machine virtuelle !**

![](https://media.giphy.com/media/LyJ6KPlrFdKnK/giphy.gif)

Comme je vous l'ai dit, Docker a besoin de Linux (LXC) pour fonctionner et quand vous n'√™tes pas sous Linux, votre version de Docker (`DockerForMac` ou `DockerForWindows`) utilisera une machine virtuelle pour ex√©cuter Docker. C'est pour cela que vous remarquerez assez rapidement que vos applications conteneuris√©es sont plus lentes sur Windows et Mac (les temps de latences d√©pendent de votre utilisation/application, des inputs/outputs n√©cessaires etc)
Rassurez-vous, c'est totalement transparent pour vous ! DockerForMac (ou DockerForWindows) s'occupera lui m√™me de g√©rer la machine virtuelle, vous n'avez pas d'hyperviseur √† installer.
A noter aussi que Docker n'est pas r√©serv√© √† la conteneurisation d'image Linux, sous Windows vous aurez le choix entre des conteneurs Windows ou Linux mais vous ne pouvez pas ex√©cuter les deux en m√™me temps, tout comme vous ne pourrez pas ex√©cuter un conteneur Windows sous Linux.

**Debriefing**

- Docker est plus lent sous MacOs et Windows
- Les conteneurs partagent le noyau h√¥te (virtualis√© ou non)
- On peut lancer des conteneurs de diff√©rents syst√®mes d'exploitation tant que la syst√®me d'exploitation qui g√®re les conteneurs est le m√™me que ceux-ci. Exemple : Un ordinateur sous windows 10 qui lance une machine virtuelle Ubuntu et qui dans celle ci aura des conteneurs sous debian.

# üóíÔ∏è Dockerfile, instructions et Registry
> Si vous d√©sirez continuer √† lire cet article tout en lan√ßant les commandes, vous devez bien √©videmment avoir Docker d'install√© et de fonctionnel)

Maintenant que nous avons vu le principe m√™me de Docker et de la conteneurisation, passons √† la pratique.
Comme nous l'avons vu, l'objectif de Docker est de simplifier la cr√©ation et la manipulation de conteneurs.
Pour se faire, Docker met √† disposition une API simple qui attend des **instructions** pour fonctionner. Ces instructions sont d√©clar√©s au sein d'un fichier nomm√© **Dockerfile**.

Ce m√™me fichier est utilis√© pour construire (build) l'image, l'image construite sera ensuite envoy√©e vers un "serveur Docker" qu'on appelle **Registry**. Le **Docker Hub** est un **Registry** gratuit mis √† disposition de tout le monde (des plans payant existent aussi) mais il existe aussi d'autres Registry payant (plus performant, possibilit√© de g√©rer plusieurs repository priv√©s etc). Vous pouvez aussi g√©rer vous m√™me votre propre registry.
Pour simplifier, Docker Hub est un peu le **Github** de git, vous avez le droit √† un repository priv√© et √† autant de repository public que vous le d√©sirez et si vous d√©sirez avoir plus de repository priv√©, bah vous payez ... :)

Les images sont stock√©es avec des `Tag`, ces tags permettent de versionner les images sur le repository, par exemple si on regarde [les images disponibles pour Debian](https://hub.docker.com/_/debian) On s'aper√ßoit qu'il existe des images pour plusieurs versions de Debian (Jessie, Buster, Stretch etc..) qui sont en stable mais aussi des versions exp√©rimentales, testing, Release candidate etc.

### ‚öôÔ∏è Lancer son premier conteneur
R√©cup√©rons une image de Debian et regardons ce qu'il se passe :

- Taper `docker run -it debian:jessie sh`
- Vous devriez normalement tomber sur un shell avec juste `#` d'afficher.
- Taper `cat /etc/debian_version`
- Vous devriez voir `8.11` s'afficher
- Nous sommes bien sur une version 8 de Debian, good !

Sans presque rien faire, vous avez ex√©cuter votre premier conteneur et vous avez ex√©cut√© une commande dans celui-ci ! Congrats !
Revenons maintenant sur ce que nous avons tap√©:

- `docker run` : Permet de r√©cup√©rer une image du Registry et de l'ex√©cuter, si vous d√©sirez uniquement r√©cup√©rer une image docker sans m√™me l‚Äôex√©cuter, vous pouvez utiliser la commande `docker pull`.
- `-it` : Permet de lancer le conteneur en mode interactif
- `debian:jessie`: C'est l'image qu'on veut r√©cup√©rer et ex√©cuter, notons que `debian` est le nom du repository et `jessie` le tag de la version √† utiliser 
- `sh` : La commande qu'on cherche √† lancer apr√®s avoir lancer le conteneur

En d'autres termes, on a demand√© √† docker de r√©cup√©rer une image, la lancer et d'ex√©cuter une commande qu'on lui donne (`sh`) ! C'est tout !

Les conteneurs sont cens√©s avoir une fonction unique, par exemple on pourrait utiliser un conteneur pour lancer un processus nginx, php-fpm, go etc..
Le conteneur peut lancer cette fonction et se terminer √† la fin du processus ou ne jamais s‚Äôarr√™ter (le cas d'un serveur web, d'un worker etc.). Si vous d√©sirez arr√™ter l'ex√©cution d'un conteneur qui tourne en rond, qui est un worker ou autre vous pouvez utiliser la commande `docker kill <hash>` ou `docker kill <nom-conteneur>`.

Reprenons la m√™me image `debian:jessie` mais cette fois-ci nous lui demanderons de lancer le conteneur puis d‚Äôex√©cuter la commande `cat /etc/debian_version` sans √™tre en mode interactif. 
- Taper `docker run debian:jessie cat /etc/debian_version`
- La commande renvoie directement `8.11`

**Conclusion :** ` Docker run` va r√©cup√©rer une image docker puis l'ex√©cuter, on peut ex√©cuter l'image en mode interactif pour interagir dans le conteneur ou tout simplement lancer l‚Äôex√©cution d'une commande/fonction afin d'avoir la r√©ponse directement.

### ‚û°Ô∏è Exec
`run` nous permettant de r√©cup√©rer et lancer une image, comment fait-on quand on a un conteneur d√©j√† lanc√© et qu'on veut ex√©cuter une commande √† l'int√©rieur de celui ci sans forc√©ment passer √† chaque fois par le shell ? c'est l√† qu'`exec` intervient.
Lan√ßons `docker run nginx` dans une fen√™tre, puis dans une autre :
- `docker ps` pour afficher la liste des conteneurs en cours d'ex√©cution
- On aper√ßoit bien notre conteneur 
```
fdf20b921646  nginx "nginx -g 'daemon of‚Ä¶"   6 seconds ago   Up 4 seconds    80/tcp   happy_jepsen
```
- Essayons de r√©cup√©rer la version de debian en tapant `docker exec happy_jepsen cat /etc/debian_version` (`happy_jepsen` doit √™tre remplac√© par le nom de votre conteneur ou son hash, ici `fdf20b921646`)
- Le conteneur r√©pond `9.9`, ce qui correspond bien √† la version `stretch-slim` disponible dans le [Dockerfile](https://github.com/nginxinc/docker-nginx/blob/b749353968a57ebd9da17e12d23f1a5fb62f9de9/mainline/stretch/Dockerfile) de nginx

**Conclusion :** Il faut faire attention √† bien utiliser `docker run` et `docker exec`, on confond souvent les deux au d√©but. 
`run` => Je r√©cup√®re et je lance l'image (avec ou sans commande √† ex√©cuter) 
`exec` => Je lance une commande dans un conteneur **d√©j√†** lanc√©.

### üê• Votre premier conteneur Docker
Nous avons connaissance de quatre commandes docker : `run`, `exec`, `pull` et `ps`. 
Jusqu‚Äô√† pr√©sent nous avons r√©cup√©r√© des images docker d√©j√† cr√©e, mais qu'en est-il d'une image qu'on souhaiterait cr√©er ?

Commen√ßons par faire notre premier fichier **Dockerfile** :
- Cr√©er un fichier nomm√©  `Dockerfile` et y ajouter : 

```dockerfile
FROM debian:jessie

RUN echo "toto"
```

On y voit deux instructions :

- `FROM` : Demande √† Docker de r√©cup√©rer une image (en l'occurence `debian:jessie`)
- `RUN` : Ex√©cute une commande syst√®me, √ßa pourrait √™tre `ls`, `cp`, `cat` ...

Les images Docker ont besoin d'√™tre build pour ensuite pouvoir √™tre lanc√©e. 
Pour lancer le build d'une image, il suffit d'utiliser la commande `docker build .`. On dit juste √† Docker de build l'image courante, docker se chargera de prendre le fichier `Dockerfile` dans votre r√©pertoire courant. Vous pouvez aussi sp√©cifier un chemin vers un Dockerfile en utilisant `docker build -f repertoire/Dockerfile .`

Voici le retour de la commande: 

```bash
 btor@dev$  docker build -f test/Dockerfile .
Sending build context to Docker daemon  3.928MB
Step 1/2 : FROM debian:jessie
 ---> 7cd9fb1ee74f
Step 2/2 : RUN echo "toto"
 ---> Using cache
 ---> 8831306e5a73
Successfully built 8831306e5a73
``` 

Trois choses importantes sont √† noter :

- On voit tr√®s clairement les deux √©tapes que docker ex√©cute : FROM et RUN
- Chaque √©tape √† son propre hash `7cd9fb1ee74f` pour le FROM et `8831306e5a73` pour le RUN, chaque √©tape/instruction va cr√©er un nouveau layer (une couche).
- Le build r√©sulte d'un message `Successfully build 8831306e5a73`

## üìö Les couches/layers
Pour chaque √©tape ou instruction que l'ont √©cris dans notre Dockerfile, Docker va cr√©er un layer avec un `hash` propre √† celui ci. Chaque layer est utilisable tel quel ! Oui oui ! Vous pouvez lancer un conteneur en vous basant sur le `hash` de votre layer
(vous pouvez tester en tapant`docker run 8831306e5a73 cat /etc/debian_version`)

![](https://media.giphy.com/media/2YntTHAxuJLZcKpOy9/giphy.gif)

Vulgarisons la chose, voil√† ce que vous demandez √† Docker:

- **Vous:** Cr√©er moi une image qui h√©rite de `debian:jessie`
- **Docker:** C'est fait, l'image est √©crite dans le cache avec le hash `7cd9fb1ee74f`
- **Vous:** En utilisant cette image, lance la commande `echo "toto"`
- **Docker:** C'est fait, j'ai r√©utiliser l'image `debian:jessie` puis y ai lanc√© la commande `echo "toto"` et j'ai sauvegard√© le r√©sultat dans une nouvelle image avec le hash `8831306e5a73`

Pour chaque √©tape, docker cr√©er une couche, c'est g√©nial parce que √ßa nous permet √† la fois de tester ces √©tapes une √† une mais c'est aussi une bonne chose puisque Docker va √™tre capable de comprendre vos modifications sur le Dockerfile et de ne relancer que ce qui a √©t√© modifi√©, exemple : 

Vous avez un dockerfile avec diff√©rentes √©tapes: 

- Etape 1 / hash 111
- Etape 2 / hash 222
- Etape 3 / hash 333

Vous lancez votre `docker build .` et vous vous rendez compte que votre √©tape 2 n'est pas bonne. Vous l'√©ditez et relanc√© le build... et la **PAF !** vous vous rendez compte que Docker ne relance pas l'√©tape 1 mais passe directement √† l'√©tape 2 et 3, pourquoi ? parce qu‚Äôil a d√©j√† en m√©moire l'√©tape 1 et sait qu'elle n'a pas √©t√© touch√© donc il peut repartir de l√† et ex√©cuter les √©tapes filles. A noter que les √©tapes sont s√©quentielles, elles d√©pendent toutes de leur "m√®re", Etape 3 d√©pend de Etape 2 qui elle m√™me d√©pend d'Etape 1. Docker ne peut donc pas relancer uniquement L'√©tape 2, elle est la m√®re de l'√©tape 3 et donc Docker n'a aucun moyen de savoir si elle a √©t√© modifi√© ou pas.
 
## üìù Les instructions
On l'a vu plus haut, un Dockerfile est compos√© d'instructions, dans les instructions courantes, on retrouve: 

- `FROM`: C'est notre h√©ritage de base de l'image
- `RUN`: On lance une commande dans le filesystem du conteneur
- `COPY`: Permet de copier des fichiers depuis la machine h√¥te vers le conteneur
- `LABEL`:  Notion "d'√©tiquettes" qu'on donne au conteneur, utile pour mettre qui est l'auteur, le mainteneur, ou un mail de contact
- `ENV`: Affectation de variables d'environnements
- `EXPOSE`: Permet d'exposer des ports, par exemple dans le cas d'un conteneur de serveur web, on exposera le port 80 et 443 afin de pouvoir acc√©der au processus Nginx/Apache
- `WORKDIR`: Change le r√©pertoire de travail 
- `ENTRYPOINT`: Lance un script d'initialisation du conteneur
- `CMD`: Une fois le conteneur lanc√©, CMD sera utilis√© comme commande par d√©faut pour lancer le conteneur (typiquement sur un conteneur `node` on pourrait avoir un `node start`) 

Ces instructions peuvent √™tre utilis√©es dans l'ordre que vous voulez, √† l'exception de certaines... (bah oui, il y a toujours un truc bizarre qui se cache...).
Dans vos premiers Dockerfile vous utiliserez **toujours** l'instruction `FROM` en premi√®re. Tout simplement parce que votre image commence toujours √† partir d'une autre image,  vous avez la possibilit√© de cr√©er votre propre image de "d√©part". C'est ce qu'on appelle les `base image`. Il n'est pas du tout n√©cessaire de savoir cr√©er des `base image` pour utiliser Docker mais pour les int√©ress√©s [voici le lien](https://docs.docker.com/develop/develop-images/baseimages/).

Mention sp√©ciale aussi pour `CMD` et `ENTRYPOINT` qui sont souvent utilis√©es √† la fin du Dockerfile pour des soucis de lisibilit√©/compr√©hension et parce qu'elles d√©finissent le script/command √† lanc√© une fois le conteneur "pr√™t".

## üïäÔ∏è Push it to the limit

![](https://media.giphy.com/media/owiooI9tn2hjy/giphy.gif)

On a arrive √† construire nos images en locale, √† les lancer, lancer des commandes √† l'int√©rieur de nos conteneurs etc.. cool ! mais comment fait-on pour les sauvegarder sur le hub ?

Premi√®re √©tape, votre `Dockerfile` doit √™tre versionn√© avec github (ou autre) afin de garder une trace de votre image.
La deuxi√®me √©tape est toute simple, pour chaque version de votre image, vous allez lui appliquer un `tag` et l'envoyer sur le hub docker.

Faisons un essai avec ce Dockerfile: 
```bash
FROM debian:jessie
LABEL maintainer="Thibaut BAYER<bt0r>"
RUN echo "Bienvenue sur votre premi√®re image docker"
COPY ./script.sh /root/script.sh
RUN chmod 777 /root/script.sh
ENTRYPOINT ["/root/script.sh"]
```
Au m√™me endroit que le Dockerfile, cr√©ez un fichier nomm√© `script.sh` avec ceci √† l'int√©rieur

```bash
#!/bin/bash
echo "WOW ca marche"
```
Lancons le build de l'image : 
```
docker build .
```
Ce qui nous donne 
```bash
Sending build context to Docker daemon  3.072kB
Step 1/6 : FROM debian:jessie
 ---> d69ffb5f6cbf
Step 2/6 : LABEL maintainer="Thibaut BAYER<bt0r>"
 ---> Using cache
 ---> 2ffcffa9a5a8
Step 3/6 : RUN echo "Bienvenue sur votre premi√®re image docker"
 ---> Using cache
 ---> cb64dcad7887
Step 4/6 : COPY ./script.sh /root/script.sh
 ---> 70d8badd9532
Step 5/6 : RUN chmod 777 /root/script.sh
 ---> Running in a7f7f63d4490
Removing intermediate container a7f7f63d4490
 ---> 8df44389144c
Step 6/6 : ENTRYPOINT ["/root/script.sh"]
 ---> Running in 0d4194fc0f3e
Removing intermediate container 0d4194fc0f3e
 ---> 1faa94d56d33
Successfully built 1faa94d56d33

```

Vous noterez qu'une seule √©tape de mon Dockerfile cr√©e quelque chose dans le conteneur, c'est l'√©tape "COPY" qui copie un fichier depuis le syst√®me h√¥te jusqu'au conteneur. L'instructions `RUN echo "Bienvenue ..."` ne s'affiche que lors de l‚Äôex√©cution du build, pas une fois l'image cr√©e/lanc√©e.

Notre image est cr√©e en local, on peut l‚Äôex√©cuter en faisant `docker run 1faa94d56d33` (o√π `1faa94d56d33` correspond au dernier layer construit).

`WOW ca marche` s'affiche, g√©nial, sauf que voil√†, notre image n'a pas de version/nom du coup c'est un peu chiant d'utiliser √† chaque fois le hash de celle-ci. 

Et si on la tagguait ? Pour tagguer, il suffit d'utiliser l'option `-t` :

```bash
$ docker build . -t btor/wow

Sending build context to Docker daemon  3.072kB
Step 1/6 : FROM debian:jessie
 ---> d69ffb5f6cbf
Step 2/6 : LABEL maintainer="Thibaut BAYER<bt0r>"
 ---> Using cache
 ---> 2ffcffa9a5a8
Step 3/6 : RUN echo "Bienvenue sur votre premi√®re image docker"
 ---> Using cache
 ---> cb64dcad7887
Step 4/6 : COPY ./script.sh /root/script.sh
 ---> Using cache
 ---> 70d8badd9532
Step 5/6 : RUN chmod 777 /root/script.sh
 ---> Using cache
 ---> 8df44389144c
Step 6/6 : ENTRYPOINT ["/root/script.sh"]
 ---> Using cache
 ---> 1faa94d56d33
Successfully built 1faa94d56d33
Successfully tagged btor/wow:latest
```

On note ici que j'ai utilis√© : `btor` comme nom de compte docker hub, `wow` comme repository et c'est tout, docker m'a automatiquement attribu√© la version `latest`, ce qui veut dire que si je refait un build de cette m√™me image ou d'une image modifi√© avec le m√™me tag, elle surchargera ma pr√©c√©dente. Et oui jamy !

![](https://media1.tenor.com/images/43d1951bb99d9223dbdc3146ef8b4f60/tenor.gif?itemid=11967093)

Pour sp√©cifier une version, on peut tout simplement ajouter `:v1` par exemple, ce qui donnerait 

```bash
docker build . -t <vous>/wow:v1
```
La version peut s'appeller de n'importe quelle facon `10.1`, `v1`, `v1-alpha` ...

Notre image en v1 cr√©e en local, il serait temps de l'envoyer sur le docker hub en tapant `docker push <vous>/wow:v1` (pensez √† remplacer `<vous>` par votre nom de compte docker hub que ce soit pour vos builds ou vos push sinon vous n'aurez pas les droits d'envoyer sur un repository dont vous n'√™tes pas le propri√©taire)

```bash
docker push <vous>/wow:v1
The push refers to repository [docker.io/<vous>/wow]
abd25ccbce1b: Pushed 
c70e7bc63ac2: Pushed 
790002cce4fd: Mounted from library/debian 
v1: digest: sha256:90717eefe2dedddfd65d818f88f1c75aa29b7f5c3aafc43dba2b0fca8656cf9b size: 943
```
Notre image est d√©sormais disponible sur le docker hub, elle est r√©utilisable par n'importe qui (repository public) ! Top ! 
Maintenant √©ditons notre `script.sh` et rempla√ßons le `WOW ca marche` par `WOW c'est la v2 !` et taggons tout ca en v2
- `vim script.sh` -> Wow c'est la v2 !
- ` docker build . -t <vous>/wow:v2`
- `docker push <vous>/wow:v2`

Une fois le push effectu√©, rendez vous sur votre compte docker hub. Vous devriez avoir 2 versions (`v1` et `v2`) dans votre repository `wow`.

Les deux versions peuvent √™tre r√©cup√©r√©es par n'importe qui en faisant `docker pull <vous>/wow:v1` ou `docker run <vous>/wow:v2`, si l'image n'existe pas en local, docker va rechercher sur docker hub et va automatiquement t√©l√©charger l'image.

Et si on testait ce fonctionnement en local ? :D 

- Listez vos images locales en tapant `docker images <vous>/wow`
- Supprimez vos 2 versions locale `v1` et `v2` en faisant ` docker rmi --force 1faa94d56d33 1faa94d56d33` (avec vos hash d'images)

**docker images** permet de lister les images disponibles en local, tandis que **docker rmi** supprime les images (`rmi` pour remove images).

Les images √©tant supprim√©es, testons de r√©cup√©rer les images que vous avez publiez :

- `docker run <vous>/wow:v1` => WOW ca marche
- `docker run <vous>/wow:v2` => WOW c'est la v2 !

Dans les deux cas, docker nous informe bien que l'image n'est pas disponible en local `Unable to find image '<vous>/wow:v1' locally`. Vous pouvez d'ailleurs essayer avec les images que j'ai moi m√™me post√© sur le hub sans remplacer par votre nom d'utilisateur : `docker run btor/wow:v1` vous devriez avoir le m√™me r√©sultat mais docker ret√©l√©chargera l'image (vu que pour lui elle est diff√©rente de la votre).

# Conclusion
Vous avez d√©sormais les notions de bases de docker, vous savez comment docker fonctionne, comment r√©cup√©rer/stoper/lancer/cr√©er/pousser une image. 
Si vous avez aim√© cet article ou que vous d√©sirez avoir plus d'informations (voir m√™me d'autres articles dans la m√™me veine, `docker-compose`, docker avanc√©, `kubernetes` etc..) faites le moi savoir :D
